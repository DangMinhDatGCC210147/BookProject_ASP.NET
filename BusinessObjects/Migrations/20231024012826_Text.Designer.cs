// <auto-generated />
using System;
using BusinessObjects;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObjects.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20231024012826_Text")]
    partial class Text
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookStore.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("BusinessObjects.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Description for Author 1",
                            Name = "Author 1"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Description for Author 2",
                            Name = "Author 2"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Description for Author 3",
                            Name = "Author 3"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Description for Author 4",
                            Name = "Author 4"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Description for Author 5",
                            Name = "Author 5"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Description for Author 6",
                            Name = "Author 6"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Description for Author 7",
                            Name = "Author 7"
                        });
                });

            modelBuilder.Entity("BusinessObjects.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsSale")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PageCount")
                        .HasColumnType("int");

                    b.Property<int>("PublicationYear")
                        .HasColumnType("int");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Description = "Description for Book 1",
                            GenreId = 1,
                            ISBN = "123456789",
                            Image = "1.jpg",
                            IsSale = true,
                            LanguageId = 1,
                            OriginalPrice = 19.99m,
                            PageCount = 300,
                            PublicationYear = 2020,
                            PublisherId = 1,
                            Quantity = 18,
                            SellingPrice = 14.99m,
                            Title = "Book 1"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            Description = "Description for Book 2",
                            GenreId = 2,
                            ISBN = "987654321",
                            Image = "2.jpg",
                            IsSale = false,
                            LanguageId = 2,
                            OriginalPrice = 24.99m,
                            PageCount = 400,
                            PublicationYear = 2019,
                            PublisherId = 2,
                            Quantity = 18,
                            SellingPrice = 19.99m,
                            Title = "Book 2"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            Description = "Description for Book 3",
                            GenreId = 1,
                            ISBN = "987654322",
                            Image = "3.jpg",
                            IsSale = true,
                            LanguageId = 1,
                            OriginalPrice = 29.99m,
                            PageCount = 350,
                            PublicationYear = 2021,
                            PublisherId = 1,
                            Quantity = 18,
                            SellingPrice = 24.99m,
                            Title = "Book 3"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 1,
                            Description = "Description for Book 4",
                            GenreId = 3,
                            ISBN = "123456790",
                            Image = "4.jpg",
                            IsSale = true,
                            LanguageId = 3,
                            OriginalPrice = 18.99m,
                            PageCount = 280,
                            PublicationYear = 2018,
                            PublisherId = 3,
                            Quantity = 0,
                            SellingPrice = 15.99m,
                            Title = "Book 4"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 2,
                            Description = "Description for Book 5",
                            GenreId = 2,
                            ISBN = "987654323",
                            Image = "5.jpg",
                            IsSale = false,
                            LanguageId = 2,
                            OriginalPrice = 34.99m,
                            PageCount = 450,
                            PublicationYear = 2022,
                            PublisherId = 2,
                            Quantity = 18,
                            SellingPrice = 29.99m,
                            Title = "Book 5"
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 4,
                            Description = "Description for Book 6",
                            GenreId = 1,
                            ISBN = "123456791",
                            Image = "6.jpg",
                            IsSale = false,
                            LanguageId = 1,
                            OriginalPrice = 14.99m,
                            PageCount = 240,
                            PublicationYear = 2017,
                            PublisherId = 1,
                            Quantity = 18,
                            SellingPrice = 11.99m,
                            Title = "Book 6"
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 5,
                            Description = "Description for Book 7",
                            GenreId = 1,
                            ISBN = "987654324",
                            Image = "7.jpg",
                            IsSale = true,
                            LanguageId = 3,
                            OriginalPrice = 22.99m,
                            PageCount = 320,
                            PublicationYear = 2019,
                            PublisherId = 3,
                            Quantity = 18,
                            SellingPrice = 18.99m,
                            Title = "Book 7"
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 2,
                            Description = "Description for Book 8",
                            GenreId = 2,
                            ISBN = "123456792",
                            Image = "8.jpg",
                            IsSale = true,
                            LanguageId = 2,
                            OriginalPrice = 26.99m,
                            PageCount = 380,
                            PublicationYear = 2021,
                            PublisherId = 2,
                            Quantity = 18,
                            SellingPrice = 21.99m,
                            Title = "Book 8"
                        },
                        new
                        {
                            Id = 9,
                            AuthorId = 3,
                            Description = "Description for Book 9",
                            GenreId = 1,
                            ISBN = "987654325",
                            Image = "9.jpg",
                            IsSale = false,
                            LanguageId = 1,
                            OriginalPrice = 17.99m,
                            PageCount = 260,
                            PublicationYear = 2020,
                            PublisherId = 1,
                            Quantity = 18,
                            SellingPrice = 14.99m,
                            Title = "Book 9"
                        },
                        new
                        {
                            Id = 10,
                            AuthorId = 4,
                            Description = "Description for Book 10",
                            GenreId = 3,
                            ISBN = "123456793",
                            Image = "10.jpg",
                            IsSale = true,
                            LanguageId = 3,
                            OriginalPrice = 31.99m,
                            PageCount = 420,
                            PublicationYear = 2022,
                            PublisherId = 3,
                            Quantity = 18,
                            SellingPrice = 26.99m,
                            Title = "Book 10"
                        });
                });

            modelBuilder.Entity("BusinessObjects.CartDetail", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("CartId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("BookId", "CartId");

                    b.HasIndex("CartId");

                    b.ToTable("CartDetails");
                });

            modelBuilder.Entity("BusinessObjects.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DiscountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Percentage")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Discounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DiscountName = "Discount 1",
                            EndDate = new DateTime(2023, 10, 31, 8, 28, 26, 271, DateTimeKind.Local).AddTicks(4408),
                            Percentage = 50,
                            StartDate = new DateTime(2023, 10, 17, 8, 28, 26, 271, DateTimeKind.Local).AddTicks(4404)
                        },
                        new
                        {
                            Id = 2,
                            DiscountName = "Discount 2",
                            EndDate = new DateTime(2023, 11, 3, 8, 28, 26, 271, DateTimeKind.Local).AddTicks(4411),
                            Percentage = 60,
                            StartDate = new DateTime(2023, 10, 21, 8, 28, 26, 271, DateTimeKind.Local).AddTicks(4409)
                        },
                        new
                        {
                            Id = 3,
                            DiscountName = "Discount 3",
                            EndDate = new DateTime(2023, 10, 29, 8, 28, 26, 271, DateTimeKind.Local).AddTicks(4412),
                            Percentage = 50,
                            StartDate = new DateTime(2023, 10, 23, 8, 28, 26, 271, DateTimeKind.Local).AddTicks(4411)
                        });
                });

            modelBuilder.Entity("BusinessObjects.Favourite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Favourites");
                });

            modelBuilder.Entity("BusinessObjects.FeedBack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("BusinessObjects.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddDate = new DateTime(2023, 10, 24, 8, 28, 26, 271, DateTimeKind.Local).AddTicks(4361),
                            ApprovalStatus = 0,
                            Description = "Description for Fiction",
                            Name = "Fiction"
                        },
                        new
                        {
                            Id = 2,
                            AddDate = new DateTime(2023, 10, 24, 8, 28, 26, 271, DateTimeKind.Local).AddTicks(4372),
                            ApprovalStatus = 1,
                            Description = "Description for Mystery",
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 3,
                            AddDate = new DateTime(2023, 10, 24, 8, 28, 26, 271, DateTimeKind.Local).AddTicks(4373),
                            ApprovalStatus = 2,
                            Description = "Description for Science Fiction",
                            Name = "Science Fiction"
                        },
                        new
                        {
                            Id = 4,
                            AddDate = new DateTime(2023, 10, 24, 8, 28, 26, 271, DateTimeKind.Local).AddTicks(4374),
                            ApprovalStatus = 0,
                            Description = "Description for Fantasy",
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 5,
                            AddDate = new DateTime(2023, 10, 24, 8, 28, 26, 271, DateTimeKind.Local).AddTicks(4374),
                            ApprovalStatus = 1,
                            Description = "Description for Romance",
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 6,
                            AddDate = new DateTime(2023, 10, 24, 8, 28, 26, 271, DateTimeKind.Local).AddTicks(4375),
                            ApprovalStatus = 0,
                            Description = "Description for Horror",
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 7,
                            AddDate = new DateTime(2023, 10, 24, 8, 28, 26, 271, DateTimeKind.Local).AddTicks(4376),
                            ApprovalStatus = 1,
                            Description = "Description for Adventure",
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 8,
                            AddDate = new DateTime(2023, 10, 24, 8, 28, 26, 271, DateTimeKind.Local).AddTicks(4376),
                            ApprovalStatus = 2,
                            Description = "Description for Non-fiction",
                            Name = "Non-fiction"
                        },
                        new
                        {
                            Id = 9,
                            AddDate = new DateTime(2023, 10, 24, 8, 28, 26, 271, DateTimeKind.Local).AddTicks(4377),
                            ApprovalStatus = 0,
                            Description = "Description for Biography",
                            Name = "Biography"
                        },
                        new
                        {
                            Id = 10,
                            AddDate = new DateTime(2023, 10, 24, 8, 28, 26, 271, DateTimeKind.Local).AddTicks(4377),
                            ApprovalStatus = 1,
                            Description = "Description for History",
                            Name = "History"
                        });
                });

            modelBuilder.Entity("BusinessObjects.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "English"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Spanish"
                        },
                        new
                        {
                            Id = 3,
                            Name = "French"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Italian"
                        });
                });

            modelBuilder.Entity("BusinessObjects.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleveryLocal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int");

                    b.Property<bool>("IsConfirm")
                        .HasColumnType("bit");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BusinessObjects.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("BusinessObjects.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "English"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Spanish"
                        },
                        new
                        {
                            Id = 3,
                            Name = "French"
                        },
                        new
                        {
                            Id = 4,
                            Name = "German"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Italian"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Chinese"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Japanese"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Korean"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Russian"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Arabic"
                        });
                });

            modelBuilder.Entity("BusinessObjects.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacebookId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("GoogleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("AppUser");
                });

            modelBuilder.Entity("BookStore.Models.Cart", b =>
                {
                    b.HasOne("BusinessObjects.AppUser", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Book", b =>
                {
                    b.HasOne("BusinessObjects.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Language", "Language")
                        .WithMany("Books")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Genre");

                    b.Navigation("Language");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("BusinessObjects.CartDetail", b =>
                {
                    b.HasOne("BusinessObjects.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStore.Models.Cart", "Cart")
                        .WithMany("CartDetails")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("BusinessObjects.Favourite", b =>
                {
                    b.HasOne("BusinessObjects.Book", "Book")
                        .WithMany("Favourites")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.AppUser", "User")
                        .WithMany("Favourites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Order", b =>
                {
                    b.HasOne("BusinessObjects.Discount", "Discount")
                        .WithMany("Orders")
                        .HasForeignKey("DiscountId");

                    b.HasOne("BusinessObjects.AppUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.OrderDetail", b =>
                {
                    b.HasOne("BusinessObjects.Book", "Book")
                        .WithMany("OrderDetails")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BusinessObjects.Review", b =>
                {
                    b.HasOne("BusinessObjects.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.AppUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookStore.Models.Cart", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("BusinessObjects.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BusinessObjects.Book", b =>
                {
                    b.Navigation("Favourites");

                    b.Navigation("OrderDetails");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("BusinessObjects.Discount", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BusinessObjects.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BusinessObjects.Language", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BusinessObjects.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("BusinessObjects.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BusinessObjects.AppUser", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Favourites");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
